for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 1000
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 100
truth <- 1/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 1000
truth <- 1/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 1/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
library(lpSolveAPI)
boundsNoCov_res <- function(ordinalScale, YT, YC, maxBen, maxHarm){
nT <- length(YT) #number of treatment subjects
nC <- length(YC) #number of control subjects
if(nT == 0 | nC == 0){
stop("WARNING: YT or YC is empty")
return(c(NA,NA,NA))
} else {
ordinalScale <- sort(ordinalScale, decreasing = FALSE)
L <- length(ordinalScale)
varCount <- L^2 #number of pi_{i,j}'s
#The matrix of pi_{i,j}'s is a L x L matrix with varCount pi_{i,j}'s.
scale <- nT * nC ##this can be made large to help with solving the linear program
#############################################################################
##Calculate marginal cdf's##
#############################################################################
cdf_C <- rep(0,L)
for (i in 1:L){
cdf_C[i] <- sum(YC <= ordinalScale[i])/nC
}
cdf_T <- rep(0,L)
for (i in 1:L){
cdf_T[i] <- sum(YT <= ordinalScale[i])/nT
}
#############################################################################
##Which pi_{i,j}'s are affected by the restrictions?##
#############################################################################
restrictions <- matrix(0,nrow=L,ncol=L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]-ordinalScale[i]>maxBen | ordinalScale[i]-ordinalScale[j]>maxHarm){
restrictions[i,j] <- 1
}
}
}
restrictions <- c(restrictions)
#############################################################################
##LP for epsilon##
#############################################################################
lprec <- make.lp(0,(varCount+1))
##Setting objective function
objfn <- c(rep(0,varCount),1)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, (varCount+1)), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = c(rep(1,varCount),0), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = c(restrictions,0), "=", rhs = 0)
##marginal cdf constraints
pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen, maxHarm){
x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen, maxHarm)
x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen, maxHarm)
p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
lb <- x1[1]*p1 + x2[1]*(1-p1)
ub <- x1[2]*p1 + x2[2]*(1-p1)
return(c(lb,ub,x1,x2))
}
##The code above was used for our analyses because support restrictions were
##applied to the entire population. If your support restrictions differ between the two subpopulations,
##please use the code below.
# boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen1, maxHarm1, maxBen2, maxHarm2){
#   x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen1, maxHarm1)
#   x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen2, maxHarm2)
#   p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
#   lb <- x1[1]*p1 + x2[1]*(1-p1)
#   ub <- x1[2]*p1 + x2[2]*(1-p1)
#   return(c(lb,ub,x1,x2))
# }
nsim <- 10000
ordinalScale <- 0:1
maxBen <- 100
maxHarm <- 100
n <- 100000
truth <- 1/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 3/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.25
pT.success <- pC.success + 3/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.05
pT.success <- pC.success + 3/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
h <- hist(sqrt(n)*(estimate-truth), freq = TRUE)
~/.RData
setwd("~/.RData")
View(data)
?pnorm
pnorm(0.95,mean = 0,sd = 1)
qnorm(0.95,mean = 0,sd = 1)
qnorm(0.95,mean = 0,sd = 1)*0.7/sqrt(19)
rm(list=ls())
.83/(.7/sqrt(19))
qnorm(0.9,mean=0,sd=1)
qnorm(0.1,mean=0,sd=1)
qnorm(0.1,mean=0,sd=1)*2*0.7/0.3
5.980574^2
mu=0.3
mu0=0
sd=0.7
alpha=0.1
beta=0.1
(n=(sd*(qnorm(1-alpha)+qnorm(1-beta))/(mu-mu0))^2)
0.7/0.3*(1.2816*2)
(0.7/0.3*(1.2816*2))^2
30*1000
30*1000/60
30*1000/60/24
20*1000/60/24
25*1000/60/24
31017
31-17
11375+22624
370*4
13.18+13.40
33999+13
33999+13-6300
34012-6300
27712-4000
370*4
2135+1480
3615-3098
df <- function(s1,s2,n1,n2){
df <- (s1^2/n1 + s2^2/n2)^2
df <- df/(1/(n1-1)*(s1^2/n1)^2+(1/(n2-1))*(s2^2/n2)^2)
}
df(0.93,0.94,22,20)
df <- function(s1,s2,n1,n2){
val <- (s1^2/n1 + s2^2/n2)^2
val <- val/(1/(n1-1)*(s1^2/n1)^2+(1/(n2-1))*(s2^2/n2)^2)
return(val)
}
df(0.93,0.94,22,20)
s1 <- 5.9
s2 <- 10.8
n1 <- 35
n2 <- 52
x1bar <- 52.1
x2bar <- 72.5
df(s1,s2,n1,n2)
qt(0.975, 10^6, lower.tail = TRUE)
qt(0.975, 10^9, lower.tail = TRUE)
qt(0.975, 10^12, lower.tail = TRUE)
qt(0.5, 10^12, lower.tail = TRUE)
qt(0.975, 10^50, lower.tail = TRUE)
qt(0.975, 10^2, lower.tail = TRUE)
qt(0.975, 10^8, lower.tail = TRUE)
qt(0.975, 10^6, lower.tail = TRUE)
(100-94.5)/2
0.0275+.945
qt(0.9725, df, lower.tail = TRUE)
degF <- df(s1,s2,n1,n2)
qt(0.9725, degF, lower.tail = TRUE)
rm(list=ls())
df <- function(s1,s2,n1,n2){
val <- (s1^2/n1 + s2^2/n2)^2
val <- val/(1/(n1-1)*(s1^2/n1)^2+(1/(n2-1))*(s2^2/n2)^2)
return(val)
}
s1 <- 5.9
s2 <- 10.8
n1 <- 35
n2 <- 52
x1bar <- 52.1
x2bar <- 72.5
degF <- df(s1,s2,n1,n2)
tstar <- qt(0.9725, degF, lower.tail = TRUE)
marError <- tstar * sqrt(s1^2/n1+s2^2/n2)
x1bar - x2bar - marError
x1bar - x2bar + marError
(-3)/(10/sqrt(75))
pt(0, df=74, lower.tail = TRUE, log.p = FALSE)
tstat <- (-3)/(10/sqrt(75))
tstat
pt(tstat, df=74, lower.tail = TRUE, log.p = FALSE)
pt(tstat, df=74, lower.tail = TRUE, log.p = FALSE)*2
136-149
51-33
79-92
117-91
68-55
data <- c(-13,18,-13,26,13,18,40,9,16,1)
mean(data)
sd(data)
(1-0.914)/2
0.914+0.043
degF <- 9
tstar <- qt(0.957, degF, lower.tail = TRUE)
tstar
xbar <- mean(data)
s <- sd(data)
data <- c(-13,18,-13,26,13,18,40,9,16,1)
xbar <- mean(data)
s <- sd(data)
n <- 10
degF <- n-1
tstar <- qt(0.957, degF, lower.tail = TRUE)
tstar
marError <- tstar * s/sqrt(n)
xbar - marError
xbar + marError
xbar
rm(list=ls())
fem <- c(8000,10000,9500,8300,8200,8900,8400,8900,9700)
mal <- c(9200,9300,9200,9200,10500,9300,9100)
nfem <- length(fem)
nmal <- length(mal)
xf <- mean(fem)
xm <- mean(mal)
sf <- sd(fem)
sm <- sd(mal)
xf
xm
sf
sm
nfem
nmal
tstat <- (xf-sm)/sqrt(sf^2/nfem + sm^2/nmal)
tstat
df <- function(s1,s2,n1,n2){
val <- (s1^2/n1 + s2^2/n2)^2
val <- val/(1/(n1-1)*(s1^2/n1)^2+(1/(n2-1))*(s2^2/n2)^2)
return(val)
}
degF <- df(sf,sm,nfem,nmal)
degF
pt(tstat, df=degF, lower.tail = FALSE, log.p = FALSE)
pt(tstat, df=degF, lower.tail = FALSE, log.p = FALSE)*2
(1-0.975)/2
(1-0.975)/2+0.975
f <- c(2,4,1,2,3,2,4,5,3,2)
m <- c(5,4,4,4,4,4,7,6,5,3)
xf <- mean(f)
xm <- mean(m)
nf <- length(f)
nm <- length(m)
sf <- sd(f)
sm <- sd(m)
xf
xm
nm
nf
sf
sm
degF <- df(sf,sm,nf,nm)
degF
tstar <- qt(0.9875, degF, lower.tail = TRUE)
tstar
marError <- tstar * sqrt(sf^2/nf+sm^2/nm)
xf - xm - marError
xf - xm + marError
samp2 <- c(70,68,69,77,69,69,74,76)
samp1 <- c(70,69,70,73,64,64,65)
x2 <- mean(samp2)
x1 <- mean(samp1)
n2 <- length(samp2)
n1 <- length(samp1)
x2
x1
n2
n1
tstat <- (x2-x1)/sqrt(16/n2+16/n1)
tstat
?rnorm
?rnorm
zstat <- (x2-x1)/sqrt(16/n2+16/n1)
pval <- pnorm(zstat, df=74, lower.tail = TRUE, log.p = FALSE)
zstat <- (x2-x1)/sqrt(16/n2+16/n1)
zstat
pval <- pnorm(zstat, lower.tail = FALSE)
pval
rm(list=ls())
setwd("~/Desktop/RICV5_mofn_n500")
archive_names <- dir()[grep(".Rdata", dir())]
length(archive_names) ##this should be 10000
is.even <- function(x) x %% 2 == 0
test <- unlist(strsplit(archive_names, "seed"))
head(test)
test <- test[is.even(1:length(test))]
test2 <- substr(test, start = 1, stop = 5)
head(test2)
test2 <- strsplit(test2, "-")
temp <- rep(NA, length(archive_names))
for (i in 1:length(archive_names)){
temp[i] <- test2[[i]][1]
}
temp <- as.numeric(temp)
temp <- sort(temp)
ref <- 1:10000
ref[which(!ref %in% temp)]
nsim <- 10000
bounds.complete <- matrix(NA, nrow = nsim, ncol = 3)
LB.CI.complete <- matrix(NA, nrow = nsim, ncol = 3)
UB.CI.complete <- matrix(NA, nrow = nsim, ncol = 3)
for(i in 1:length(archive_names)){
load(archive_names[i])
bounds.complete[i,] <- bounds
LB.CI.complete[i,] <- LB.CI_mn
UB.CI.complete[i,] <- UB.CI_mn
}
bounds <- bounds.complete
LB.CI_mn <- LB.CI.complete
UB.CI_mn <- UB.CI.complete
setwd("~/Dropbox/research/revisionsPostBiometrics/simulationStudies/allResults/RICV5")
save(bounds, LB.CI_mn, UB.CI_mn, file = "n500_mofn.Rdata")
