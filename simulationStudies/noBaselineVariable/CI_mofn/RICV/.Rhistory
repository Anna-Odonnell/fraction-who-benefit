pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen, maxHarm){
x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen, maxHarm)
x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen, maxHarm)
p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
lb <- x1[1]*p1 + x2[1]*(1-p1)
ub <- x1[2]*p1 + x2[2]*(1-p1)
return(c(lb,ub,x1,x2))
}
##The code above was used for our analyses because support restrictions were
##applied to the entire population. If your support restrictions differ between the two subpopulations,
##please use the code below.
# boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen1, maxHarm1, maxBen2, maxHarm2){
#   x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen1, maxHarm1)
#   x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen2, maxHarm2)
#   p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
#   lb <- x1[1]*p1 + x2[1]*(1-p1)
#   ub <- x1[2]*p1 + x2[2]*(1-p1)
#   return(c(lb,ub,x1,x2))
# }
nsim <- 10000
ordinalScale <- 0:1
maxBen <- 100
maxHarm <- 100
n <- 100000
truth <- 1/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 1/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.5
pT.success <- pC.success + 3/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.25
pT.success <- pC.success + 3/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
n <- 10000
truth <- 3/sqrt(n)
pC.success <- 0.05
pT.success <- pC.success + 3/sqrt(n)
estimate <- rep(0,nsim)
for (i in 1:nsim){
YC <- rbinom(n/2, size = 1, prob = pC.success)
YT <- rbinom(n/2, size = 1, prob = pT.success)
estimate[i] <- boundsNoCov_res(ordinalScale, YT, YC, maxBen, maxHarm)[1]
}
s <- sqrt(n)*(estimate - truth)
boxplot(s)
h <- hist(sqrt(n)*(estimate-truth))
h$density <- h$counts/sum(h$counts)
plot(h,freq=FALSE, ylab = "Proportion", xlim = c(-5,5), ylim = c(0,1))
h <- hist(sqrt(n)*(estimate-truth), freq = TRUE)
~/.RData
setwd("~/.RData")
View(data)
?pnorm
pnorm(0.95,mean = 0,sd = 1)
qnorm(0.95,mean = 0,sd = 1)
qnorm(0.95,mean = 0,sd = 1)*0.7/sqrt(19)
rm(list=ls())
.83/(.7/sqrt(19))
qnorm(0.9,mean=0,sd=1)
qnorm(0.1,mean=0,sd=1)
qnorm(0.1,mean=0,sd=1)*2*0.7/0.3
5.980574^2
mu=0.3
mu0=0
sd=0.7
alpha=0.1
beta=0.1
(n=(sd*(qnorm(1-alpha)+qnorm(1-beta))/(mu-mu0))^2)
0.7/0.3*(1.2816*2)
(0.7/0.3*(1.2816*2))^2
30*1000
30*1000/60
30*1000/60/24
20*1000/60/24
25*1000/60/24
31017
31-17
rm(list=ls())
setwd("~/Dropbox/research/revisionsPostBiometrics/MISTIEanalysis")
load("MISTIEIIdata.Rdata")
##Each of these datasets (i.e., mRSData, clotData, baselineData) has 96 people (42 medical, 54 surgical)
##The people in these datasets meet all inclusion criteria, except having non-missing reduction in clot volume
##and baseline clot volume
##We can ignore mrsData
rm(mrsData)
##Merge baselineData and clotData
data <- merge(baselineData, clotData, by = "patientName")
rm(baselineData, clotData)
##Check that merge was successful
all(data$Group_Assigned == data$group_assigned) ##true
##Everyone has baseline and EOT reduction in clot volume
sum(is.na(data$Pre_Rand_ICH_Volume_RC)) ##0
sum(is.na(data$eot_ich_9_13)) ##0
##Calculate reduction in clot volume
data$volchange <- data$Pre_Rand_ICH_Volume_RC - data$eot_ich_9_13
##There will be 96 patients in the RICV analysis.
##Focus on the variables of interest
data <- data.frame(data$patientName, data$Group_Assigned, data$volchange, data$Pre_Rand_ICH_Volume_RC)
names(data) <- c("id", "group", "volChange", "baseVol")
control <- subset(data, group == "Medical") ##n = 42
tmt <- subset(data, group == "Surgical") ##n = 54
YT <- tmt$volChange
YC <- control$volChange
m <- median(data$baseVol) ##median baseline clot volume is 43.204999925
control1 <- subset(control, baseVol < m) ##n = 22
tmt1 <- subset(tmt, baseVol < m) ##n = 26
control2 <- subset(control, baseVol >= m) ##n = 20
tmt2 <- subset(tmt, baseVol >= m) ##n = 28
YT1 <- tmt1$volChange
YT2 <- tmt2$volChange
YC1 <- control1$volChange
YC2 <- control2$volChange
##########################################################################################################
##Discretize RICV using a bin length of 5 mL and get marginal distribution plots##
##########################################################################################################
##convert continuous clot volume into a discrete variable
levelfun <- function(x){
if(x < 0){
y = 1
} else if(x >= 0 & x < 5){
y = 2
} else if(x >= 5 & x < 10){
y = 3
} else if(x >= 10 & x < 15){
y = 4
} else if(x >= 15 & x < 20){
y = 5
} else {
y = 6
}
return(y)
}
YCd <- sapply(YC, levelfun)
YTd <- sapply(YT, levelfun)
YC1d <- sapply(YC1, levelfun)
YT1d <- sapply(YT1, levelfun)
YC2d <- sapply(YC2, levelfun)
YT2d <- sapply(YT2, levelfun)
##Get the bound estimates
ordinalScale <- 1:6
nC <- length(YCd)
nT <- length(YTd)
nC1 <- length(YC1d)
nT1 <- length(YT1d)
nC2 <- length(YC2d)
nT2 <- length(YT2d)
table(YCd)
table(YCd)/nC
table(YTd)/nT
table(YTd)/nT[5]
(table(YTd)/nT)[5]
(table(YTd)/nT)[5]+(table(YTd)/nT)[5]
(table(YTd)/nT)[5]+(table(YTd)/nT)[6]
rm(list=ls())
rm(list=ls())
#############################################################################
##Libraries##
#############################################################################
library(lpSolveAPI)
library(boot)
#############################################################################
##Function for estimating bounds##
#############################################################################
boundsNoCov_res <- function(ordinalScale, YT, YC, maxBen, maxHarm){
nT <- length(YT) #number of treatment subjects
nC <- length(YC) #number of control subjects
if(nT == 0 | nC == 0){
#stop("WARNING: YT or YC is empty")
return(c(NA,NA,NA))
} else {
ordinalScale <- sort(ordinalScale, decreasing = FALSE)
L <- length(ordinalScale)
varCount <- L^2 #number of pi_{i,j}'s
#The matrix of pi_{i,j}'s is a L x L matrix with varCount pi_{i,j}'s.
scale <- nT * nC ##this can be made large to help with solving the linear program
#############################################################################
##Calculate marginal cdf's##
#############################################################################
cdf_C <- rep(0,L)
for (i in 1:L){
cdf_C[i] <- sum(YC <= ordinalScale[i])/nC
}
cdf_T <- rep(0,L)
for (i in 1:L){
cdf_T[i] <- sum(YT <= ordinalScale[i])/nT
}
#############################################################################
##Which pi_{i,j}'s are affected by the restrictions?##
#############################################################################
restrictions <- matrix(0,nrow=L,ncol=L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]-ordinalScale[i]>maxBen | ordinalScale[i]-ordinalScale[j]>maxHarm){
restrictions[i,j] <- 1
}
}
}
restrictions <- c(restrictions)
#############################################################################
##LP for epsilon##
#############################################################################
lprec <- make.lp(0,(varCount+1))
##Setting objective function
objfn <- c(rep(0,varCount),1)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, (varCount+1)), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = c(rep(1,varCount),0), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = c(restrictions,0), "=", rhs = 0)
##marginal cdf constraints
pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
#############################################################################
##Choose m##
#############################################################################
compute_estimators_on_bootstrap_replicate_of_dataset <- function(data,index,maxBen,maxHarm,subsampleSize){
replicate_data_set <- data[sample(1:nrow(data),size=subsampleSize,replace=TRUE),]
YC <- replicate_data_set[replicate_data_set$trt==0,]$y
YT <- replicate_data_set[replicate_data_set$trt==1,]$y
res <- boundsNoCov_res(1:6, YT, YC, maxBen, maxHarm)
return(res[1:2])
}
YCpop <- unlist(read.table("YCd.txt"))
YTpop <- unlist(read.table("YTd.txt"))
maxBen <- 100
maxHarm <- 100
#############################################################################
##Simulate randomized trials##
#############################################################################
nsim <- 10000
bootrep <- 5000
N <- 1000 ##update
q <- 0.95
k <- 500 ##update
set.seed(2735901)
seed <- sample(10^7,nsim)
nsim <- nsim/10
seed <- seed[1:1000]
setwd("~/Dropbox/research/revisionsPostBiometrics/simulationStudies/CI_mofn/RICV")
YCpop <- unlist(read.table("YCd.txt"))
YTpop <- unlist(read.table("YTd.txt"))
maxBen <- 100
maxHarm <- 100
#############################################################################
##Simulate randomized trials##
#############################################################################
nsim <- 10000
bootrep <- 5000
N <- 1000 ##update
q <- 0.95
k <- 500 ##update
set.seed(2735901)
seed <- sample(10^7,nsim)
nsim <- nsim/10
seed <- seed[1:1000]
m.candidates <- unique(ceiling(N * q^(0:k)))
m.candidates <- m.candidates[m.candidates>=20]
numCandidates <- length(m.candidates)
bounds <- matrix(data = NA, nrow = nsim, ncol = 3) #bounds and eps
LB.CI_mn <- matrix(data = NA, nrow = nsim, ncol = 3) ##first two elements are limits of CI, third element is the m
UB.CI_mn <- matrix(data = NA, nrow = nsim, ncol = 3)
s <- 1
system.time(set.seed(seed[s])
YCsamp <- sample(YCpop, size = N/2, replace = TRUE)
YTsamp <- sample(YTpop, size = N/2, replace = TRUE)
bounds[s,] <- boundsNoCov_res(1:6, YTsamp, YCsamp, maxBen, maxHarm)
datasamp <- data.frame(trt=c(rep(1,length(YTsamp)),rep(0,length(YCsamp))),y=c(YTsamp,YCsamp)) #trt is 1 if treatment and 0 if control, y is the outcome
matLB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
matUB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
for (l in 1:numCandidates){
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=bootrep, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.candidates[l])
matLB[l,] <- t(sort(boot.obj$t[,1], na.last = TRUE))
matUB[l,] <- t(sort(boot.obj$t[,2], na.last = TRUE))
}
matLB <- cbind(m.candidates, matLB)
matLB <- matLB[complete.cases(matLB),] ##get rid of candidate m's with any NA's (m was too small, nT or nC = 0)
m.candidatesLB <- matLB[,1]
matLB <- matLB[,-1]
matUB <- cbind(m.candidates, matUB)
matUB <- matUB[complete.cases(matUB),]
m.candidatesUB <- matUB[,1]
matUB <- matUB[,-1]
temp1 <- matLB[1:(nrow(matLB)-1),]-matLB[2:nrow(matLB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenLB <- m.candidatesLB[min(which(temp1==min(temp1)))]
temp1 <- matUB[1:(nrow(matUB)-1),]-matUB[2:nrow(matUB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenUB <- m.candidatesUB[min(which(temp1==min(temp1)))]
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenLB)
temp1 <- boot.obj$t[,1]
LB.CI_mn[s,] <- c(quantile(temp1, probs = c(.025,0.975)), m.chosenLB)
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenUB)
temp1 <- boot.obj$t[,2]
UB.CI_mn[s,] <- c(quantile(temp1, probs = c(.025,0.975)), m.chosenUB))
set.seed(seed[s])
YCsamp <- sample(YCpop, size = N/2, replace = TRUE)
YTsamp <- sample(YTpop, size = N/2, replace = TRUE)
bounds[s,] <- boundsNoCov_res(1:6, YTsamp, YCsamp, maxBen, maxHarm)
datasamp <- data.frame(trt=c(rep(1,length(YTsamp)),rep(0,length(YCsamp))),y=c(YTsamp,YCsamp)) #trt is 1 if treatment and 0 if control, y is the outcome
matLB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
matUB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
for (l in 1:numCandidates){
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=bootrep, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.candidates[l])
matLB[l,] <- t(sort(boot.obj$t[,1], na.last = TRUE))
matUB[l,] <- t(sort(boot.obj$t[,2], na.last = TRUE))
}
matLB <- cbind(m.candidates, matLB)
matLB <- matLB[complete.cases(matLB),] ##get rid of candidate m's with any NA's (m was too small, nT or nC = 0)
m.candidatesLB <- matLB[,1]
matLB <- matLB[,-1]
matUB <- cbind(m.candidates, matUB)
matUB <- matUB[complete.cases(matUB),]
m.candidatesUB <- matUB[,1]
matUB <- matUB[,-1]
temp1 <- matLB[1:(nrow(matLB)-1),]-matLB[2:nrow(matLB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenLB <- m.candidatesLB[min(which(temp1==min(temp1)))]
temp1 <- matUB[1:(nrow(matUB)-1),]-matUB[2:nrow(matUB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenUB <- m.candidatesUB[min(which(temp1==min(temp1)))]
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenLB)
temp1 <- boot.obj$t[,1]
LB.CI_mn[s,] <- c(quantile(temp1, probs = c(.025,0.975)), m.chosenLB)
boot.obj <- boot(data = datasamp, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=10000, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenUB)
temp1 <- boot.obj$t[,2]
UB.CI_mn[s,] <- c(quantile(temp1, probs = c(.025,0.975)), m.chosenUB)
64-35
LB.CI_mn[s,]
UB.CI_mn[s,]
30*1000/60/24
30*10000/60/24
30*10000/60/24/40
