add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen, maxHarm){
x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen, maxHarm)
x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen, maxHarm)
p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
lb <- x1[1]*p1 + x2[1]*(1-p1)
ub <- x1[2]*p1 + x2[2]*(1-p1)
return(c(lb,ub,x1,x2))
}
##The code above was used for our analyses because support restrictions were
##applied to the entire population. If your support restrictions differ between the two subpopulations,
##please use the code below.
# boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen1, maxHarm1, maxBen2, maxHarm2){
#   x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen1, maxHarm1)
#   x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen2, maxHarm2)
#   p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
#   lb <- x1[1]*p1 + x2[1]*(1-p1)
#   ub <- x1[2]*p1 + x2[2]*(1-p1)
#   return(c(lb,ub,x1,x2))
# }
rm(list=ls())
##MAKE SURE TO DO THIS: Run the code in the file boundFunctions.R in the folder entitled "boundFunctions"##
setwd("~/Dropbox/research/github/fraction-who-benefit/demo")
##Load the simulated dataset
load("simulatedDataset.Rdata")
##The dataset is in wide format. There are 300 participants, one row per participant.
##A = treatment assignment (0 if control, 1 if treatment)
##X = categorical baseline variable
##Y = ordinal outcome, with larger values corresponding to better outcomes
##In this case, the ordinal outcome Y has four possible levels (1 - 4).
ordinalScale <- 1:4
YT <- data$Y[data$A == 1] ##outcomes of participants assigned to treatment
YC <- data$Y[data$A == 0] ##outcomes of participants assigned to control
YT1 <- data$Y[data$A == 1 & data$X == 1] ##outcomes of participants in the first stratum of X who are assigned to treatment
YC1 <- data$Y[data$A == 0 & data$X == 1] ##outcomes of participants in the first stratum of X who are assigned to control
YT2 <- data$Y[data$A == 1 & data$X == 2] ##outcomes of participants in the second stratum of X who are assigned to treatment
YC2 <- data$Y[data$A == 0 & data$X == 2] ##outcomes of participants in the second stratum of X who are assigned to control
##The baseline variable X has two categories labeled 1 and 2.
######################################################################################################
##Compute bound estimates##
######################################################################################################
##EXAMPLES OF BOUND ESTIMATES, WITHOUT BASELINE VARIABLE##
##Notes:
##Each result is a vector with three elements. The first element is the lower bound estimate,
##the second is the upper bound estimate, and the third is the value of epsilon_bar.
##If you do not want to impose restrictions, set the inputs maxBen and maxVal to be a value
##larger than the span of the ordinal scale.
##Without restrictions, without baseline variable
est1 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 100, maxHarm = 100)
##With no harm assumption, without baseline variable
est2 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 100, maxHarm = 0)
##With assumption that benefit is at most 2 levels, without baseline variable
est3 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 2, maxHarm = 100)
##With no harm assumption and the assumption that benefit is at most 1 level,without baseline variable
est4 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 1, maxHarm = 0)
##EXAMPLES OF BOUND ESTIMATES, WITH BASELINE VARIABLE##
##Notes:
##Each result is a vector with eight elements. Elements 1 and 2
##are the lower and upper bound estimates for the population.
##Elements 3-5 are the lower bound estimate, the upper estimate, and value of epsilon_bar_1
##for the subpopulation with X = 1.
##Elements 6-8 are the lower bound estimate, the upper estimate, and value of epsilon_bar_2
##for the subpopulation with X = 2.
##Our method can handle a baseline variable with any finite number of
##categories (it does not need to be binary). The code we provide
##(in the boundFunctions folder on GitHub) and the examples below incorporate a binary X,
##but it can be extended to handle X with more than two categories.
##Without restrictions, with baseline variable
est5 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 100, maxHarm = 100)
##With no harm assumption, with baseline variable
est6 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 100, maxHarm = 0)
##With assumption that benefit is at most 2 levels, with baseline variable
est7 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 2, maxHarm = 100)
##With no harm assumption and assumption that benefit is at most 1 level, with baseline variable
est8 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 1, maxHarm = 0)
rm(list=ls())
rm(list=ls())
##MAKE SURE TO DO THIS: Run the code in the file boundFunctions.R in the folder entitled "boundFunctions"##
setwd("~/Dropbox/research/github/fraction-who-benefit/demo")
##Load the simulated dataset
load("simulatedDataset.Rdata")
##The dataset is in wide format. There are 300 participants, one row per participant.
##A = treatment assignment (0 if control, 1 if treatment)
##X = categorical baseline variable
##Y = ordinal outcome, with larger values corresponding to better outcomes
##In this case, the ordinal outcome Y has four possible levels (1 - 4).
ordinalScale <- 1:4
YT <- data$Y[data$A == 1] ##outcomes of participants assigned to treatment
YC <- data$Y[data$A == 0] ##outcomes of participants assigned to control
YT1 <- data$Y[data$A == 1 & data$X == 1] ##outcomes of participants in the first stratum of X who are assigned to treatment
YC1 <- data$Y[data$A == 0 & data$X == 1] ##outcomes of participants in the first stratum of X who are assigned to control
YT2 <- data$Y[data$A == 1 & data$X == 2] ##outcomes of participants in the second stratum of X who are assigned to treatment
YC2 <- data$Y[data$A == 0 & data$X == 2] ##outcomes of participants in the second stratum of X who are assigned to control
##R code
library(lpSolveAPI)
boundsNoCov_res <- function(ordinalScale, YT, YC, maxBen, maxHarm){
nT <- length(YT) #number of treatment subjects
nC <- length(YC) #number of control subjects
if(nT == 0 | nC == 0){
stop("ERROR: YT or YC is empty")
return(c(NA,NA,NA))
} else {
ordinalScale <- sort(ordinalScale, decreasing = FALSE)
L <- length(ordinalScale)
varCount <- L^2 #number of pi_{i,j}'s
#The matrix of pi_{i,j}'s is a L x L matrix with varCount pi_{i,j}'s.
scale <- nT * nC ##this can be made large to help with solving the linear program
#############################################################################
##Calculate marginal cdf's##
#############################################################################
cdf_C <- rep(0,L)
for (i in 1:L){
cdf_C[i] <- sum(YC <= ordinalScale[i])/nC
}
cdf_T <- rep(0,L)
for (i in 1:L){
cdf_T[i] <- sum(YT <= ordinalScale[i])/nT
}
#############################################################################
##Which pi_{i,j}'s are affected by the restrictions?##
#############################################################################
restrictions <- matrix(0,nrow=L,ncol=L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]-ordinalScale[i]>maxBen | ordinalScale[i]-ordinalScale[j]>maxHarm){
restrictions[i,j] <- 1
}
}
}
restrictions <- c(restrictions)
#############################################################################
##LP for epsilon##
#############################################################################
lprec <- make.lp(0,(varCount+1))
##Setting objective function
objfn <- c(rep(0,varCount),1)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, (varCount+1)), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = c(rep(1,varCount),0), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = c(restrictions,0), "=", rhs = 0)
##marginal cdf constraints
pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen, maxHarm){
x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen, maxHarm)
x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen, maxHarm)
p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
lb <- x1[1]*p1 + x2[1]*(1-p1)
ub <- x1[2]*p1 + x2[2]*(1-p1)
return(c(lb,ub,x1,x2))
}
##The code above was used for our analyses because support restrictions were
##applied to the entire population. If your support restrictions differ between the two subpopulations,
##please use the code below.
# boundsCov_res <- function(ordinalScale, YT1, YC1, YT2, YC2, maxBen1, maxHarm1, maxBen2, maxHarm2){
#   x1 <- boundsNoCov_res(ordinalScale, YT1, YC1, maxBen1, maxHarm1)
#   x2 <- boundsNoCov_res(ordinalScale, YT2, YC2, maxBen2, maxHarm2)
#   p1 <- (length(YT1) + length(YC1))/(length(YT1)+length(YC1)+length(YT2)+length(YC2))
#   lb <- x1[1]*p1 + x2[1]*(1-p1)
#   ub <- x1[2]*p1 + x2[2]*(1-p1)
#   return(c(lb,ub,x1,x2))
# }
##larger than the span of the ordinal scale.
##Without restrictions, without baseline variable
est1 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 100, maxHarm = 100)
##With no harm assumption, without baseline variable
est2 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 100, maxHarm = 0)
##With assumption that benefit is at most 2 levels, without baseline variable
est3 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 2, maxHarm = 100)
##With no harm assumption and the assumption that benefit is at most 1 level,without baseline variable
est4 <- boundsNoCov_res(ordinalScale, YT, YC, maxBen = 1, maxHarm = 0)
##Without restrictions, with baseline variable
est5 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 100, maxHarm = 100)
##With no harm assumption, with baseline variable
est6 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 100, maxHarm = 0)
##With assumption that benefit is at most 2 levels, with baseline variable
est7 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 2, maxHarm = 100)
##With no harm assumption and assumption that benefit is at most 1 level, with baseline variable
est8 <- boundsCov_res(ordinalScale, YT1, YC1, YT2, YC2, maxBen = 1, maxHarm = 0)
##Functions for m-of-n bootstrap
library(lpSolveAPI)
library(boot)
##This function below is for computing bound estimates.
##It is the same as boundsNoCov_res in the boundFunctions.R script,
##except we do not return an error if nT = 0 or nC = 0.
##This is because that is likely to happen for candidate values of m
##that are small. Rather than halting the code when this happens,
##we let the lower and upper bound estimates be NA. Candidate values of m
##with NA's are then eliminated from consideration.
boundsNoCov_res_mOfn <- function(ordinalScale, YT, YC, maxBen, maxHarm){
nT <- length(YT) #number of treatment subjects
nC <- length(YC) #number of control subjects
if(nT == 0 | nC == 0){
#stop("ERROR: YT or YC is empty")
return(c(NA,NA,NA))
} else {
ordinalScale <- sort(ordinalScale, decreasing = FALSE)
L <- length(ordinalScale)
varCount <- L^2 #number of pi_{i,j}'s
#The matrix of pi_{i,j}'s is a L x L matrix with varCount pi_{i,j}'s.
scale <- nT * nC ##this can be made large to help with solving the linear program
#############################################################################
##Calculate marginal cdf's##
#############################################################################
cdf_C <- rep(0,L)
for (i in 1:L){
cdf_C[i] <- sum(YC <= ordinalScale[i])/nC
}
cdf_T <- rep(0,L)
for (i in 1:L){
cdf_T[i] <- sum(YT <= ordinalScale[i])/nT
}
#############################################################################
##Which pi_{i,j}'s are affected by the restrictions?##
#############################################################################
restrictions <- matrix(0,nrow=L,ncol=L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]-ordinalScale[i]>maxBen | ordinalScale[i]-ordinalScale[j]>maxHarm){
restrictions[i,j] <- 1
}
}
}
restrictions <- c(restrictions)
#############################################################################
##LP for epsilon##
#############################################################################
lprec <- make.lp(0,(varCount+1))
##Setting objective function
objfn <- c(rep(0,varCount),1)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, (varCount+1)), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = c(rep(1,varCount),0), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = c(restrictions,0), "=", rhs = 0)
##marginal cdf constraints
pij.matrix <- matrix(1:varCount, nrow = L, ncol = L)
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_C[i]*scale), indices = c(pij.matrix[1:i,],(varCount+1)))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = c(rep(1,L*i),-1), "<=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
add.constraint(lprec, xt = rep(1,L*i+1), ">=", rhs = (cdf_T[i]*scale), indices = c(pij.matrix[,1:i],(varCount+1)))
}
##Solving linear program
eps.flag <- solve(lprec)
if(eps.flag != 0){
stop("WARNING: problem with LP for eps")
}
eps <- get.objective(lprec)/scale
if (eps < 10 ^ (-10)){
eps <- 0
}
rm(lprec)
#############################################################################
##LP for lb and ub##
#############################################################################
lprec <- make.lp(0,varCount)
##Setting objective function
objfn <- matrix(0, L, L)
for (i in 1:L){
for (j in 1:L){
if (ordinalScale[j]>ordinalScale[i]){
objfn[i,j] <- 1
}
}
}
objfn <- c(objfn)
set.objfn(lprec,objfn)
##Setting non-negativity bounds
set.bounds(lprec, lower = rep(0, varCount), upper = NULL)
##pi_{i,j}'s sum to 1
add.constraint(lprec, xt = rep(1,varCount), "=", rhs = scale)
##incorporating the restrictions
add.constraint(lprec, xt = restrictions, "=", rhs = 0)
##marginal cdf constraints
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_C[i]+eps)*scale, indices = c(pij.matrix[1:i,]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_C[i]-eps)*scale, indices = c(pij.matrix[1:i,]))
}
for (i in 1:(L-1)){
add.constraint(lprec, xt = rep(1,L*i), "<=", rhs = (cdf_T[i]+eps)*scale, indices = c(pij.matrix[,1:i]))
add.constraint(lprec, xt = rep(1,L*i), ">=", rhs = (cdf_T[i]-eps)*scale, indices = c(pij.matrix[,1:i]))
}
lb.flag <- solve(lprec)
if(lb.flag != 0){
stop("WARNING: problem with LP for lb")
}
lb <- get.objective(lprec)/scale
lp.control(lprec,sense='max')
ub.flag <- solve(lprec)
if(ub.flag != 0){
stop("WARNING: problem with LP for ub")
}
ub <- get.objective(lprec)/scale
return(c(lb,ub,eps))
}
}
compute_estimators_on_bootstrap_replicate_of_dataset <- function(data,index,maxBen,maxHarm,subsampleSize){
replicate_data_set <- data[sample(1:nrow(data),size=subsampleSize,replace=TRUE),]
YC <- replicate_data_set[replicate_data_set$A==0,]$Y
YT <- replicate_data_set[replicate_data_set$A==1,]$Y
res <- boundsNoCov_res_mOfn(ordinalScale, YT, YC, maxBen, maxHarm)
return(res[1:2])
}
set.seed(35841358)
N <- nrow(data) ##sample size of dataset
maxBen <- 100 ##indicate that no restrictions are to be imposed
maxHarm <- 100
q <- 0.95 ##inputs for determining candidate values for m
k <- 500
m.candidates <- unique(ceiling(N * q^(0:k)))
m.candidates <- m.candidates[m.candidates>=20] ##these are the candidate values for m
bootrep <- 5000 ##This is the number of replicated datasets to be generated
##for each candidate value m. Let it be a large number.
bootrep.chosenM <- 10000 ##This is the number of replicated datasets to be generated
##for the value m that is selected.
##STEP 1: Selecting m for the lower bound and separately for the upper bound##
numCandidates <- length(m.candidates)
matLB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
matUB <- matrix(NA, nrow = numCandidates, ncol = bootrep)
Sys.time()
for (l in 1:numCandidates){
boot.obj <- boot(data = data, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=bootrep, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.candidates[l])
matLB[l,] <- t(sort(boot.obj$t[,1], na.last = TRUE))
matUB[l,] <- t(sort(boot.obj$t[,2], na.last = TRUE))
}
Sys.time()
##This loop gets the lower and upper bound estimates of the 5,000 bootstrap replicated datasets. The
##results are stored in matLB and matUB, respectively. Since this is done for each candidate value m,
##it is the most time-consuming step of m-out-of-n bootstrap. It can be sped up through
##parallelization, since the results for the different candidates can be computed independently.
##For each candidate value, there is a row in matLB (matUB) with the lower (upper) bound estimates for that candidate value.
##The lower (upper) bound estimates are ordered from smallest to largest, with any NA's at the end.
##Now we select the value m for the lower bound
matLB <- cbind(m.candidates, matLB) ##Label each row with the candidate value to which it corresponds.
matLB <- matLB[complete.cases(matLB),] ##get rid of candidate m's with any NA's (m was too small, nT or nC = 0)
m.candidatesLB <- matLB[,1] ##these are the candidates remaining after excluding those with NA's
matLB <- matLB[,-1] ##Take off the labels. We don't want these when choosing m.
temp1 <- matLB[1:(nrow(matLB)-1),]-matLB[2:nrow(matLB),] ##Take the difference between adjacent rows (row 1 - row 2, row2 - row3, row3 - row4, ...)
temp1 <- abs(temp1) ##Take the absolute value (|row1 - row2|, |row2 - row3|, |row3 - row4|, ...)
temp1 <- apply(temp1, 1, max) ##Find the maximum (max{|row1 - row2|}, max{|row2 - row3|}, max{|row3 - row4}, ...)
m.chosenLB <- m.candidatesLB[min(which(temp1==min(temp1)))]
##Choose the value m with the smallest max absolute difference.
##If multiple m attain the smallest max absolute difference, choose the largest one.
##m.chosenLB is the value m selected for lower bound
##Separately, but using the same procedure, we select the value m for the upper bound
matUB <- cbind(m.candidates, matUB)
matUB <- matUB[complete.cases(matUB),]
m.candidatesUB <- matUB[,1]
matUB <- matUB[,-1]
temp1 <- matUB[1:(nrow(matUB)-1),]-matUB[2:nrow(matUB),]
temp1 <- abs(temp1)
temp1 <- apply(temp1, 1, max)
m.chosenUB <- m.candidatesUB[min(which(temp1==min(temp1)))]
##m.chosenUB is the value m selected for upper bound
##STEP 2: Run bootstrap using selected values of m##
Sys.time()
boot.obj <- boot(data = data, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=bootrep.chosenM, maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenLB)
LB.CI_mn <- c(quantile(boot.obj$t[,1], probs = c(.025,0.975)), m.chosenLB)
Sys.time()
Sys.time()
boot.obj <- boot(data = data, statistic= compute_estimators_on_bootstrap_replicate_of_dataset, R=bootrep.chosenM , maxBen = maxBen, maxHarm = maxHarm, subsampleSize = m.chosenUB)
UB.CI_mn <- c(quantile(boot.obj$t[,2], probs = c(.025,0.975)), m.chosenUB)
Sys.time()
##STEP 3: Gather the results in a data frame and print the results##
result <- rbind(LB.CI_mn, UB.CI_mn)
result <- data.frame(result)
names(result) <- c("lowerLimit", "upperLimit", "m")
row.names(result) <- c("lower bound", "upper bound")
result ##This gives the CI's
est1
est2
est3
est4
est5
est6
est7
est8
result
est1
est2
est3
est4
est5
est6
est7
est8
result
